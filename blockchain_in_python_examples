The code of Blockchain.py under source_code/ follows the tutorial blog at the following site:
https://www.activestate.com/blog/how-to-build-a-blockchain-in-python/
"How to Build a Blockchain in Python (Get Pre-built Runtime)"
Author: Dante Sblendorio

Procedure:in Blockchain.py, first define a "Block" class with hashing function for security, then define a "Blockchain" class that chains block together. After that, add a proof-of-work method to make tampering more difficult and a mining process to perform the computational task.

A Flask web application interface in Python interacts with the nodes and receive query from them. The information of the blockchain then is displayed.

Activate the blockchain on a terminal:
[Pizza-Team/Blockchain] joy@joy-OMEN-Laptop-15-ek0xxx:~/meetup/she256/Pizza-Team/Blockchain$ python3 Blockchain.py
 * Serving Flask app "Blockchain" (lazy loading)
 * Environment: production
   WARNING: Do not use the development server in a production environment.
   Use a production WSGI server instead.
 * Debug mode: on
 * Running on http://127.0.0.1:5000/ (Press CTRL+C to quit)
 * Restarting with stat
 * Debugger is active!
 * Debugger PIN: 143-860-727

From another terminal, send a request to get the information about the blckchain:
curl  http://127.0.0.1:5000/chain
(venv) joy@joy-OMEN-Laptop-15-ek0xxx:~/meetup/she256/Pizza-Team/Blockchain$ curl  http://127.0.0.1:5000/chain
{"length": 1, "chain": [{"index": 0, "transactions": [], "timestamp": 1623885750.0732675, "previous_hash": "0", "nonce": 0, "hash": "eaf1eb4e527bb21799b058cc8f73bb4c3cf921650ff8085b27dd30a9a646abfe"}]}
